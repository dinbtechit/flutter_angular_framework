// This file has been generated by the reflectable package.
// https://github.com/dart-lang/reflectable.
// @dart = 2.12

import 'dart:core';
import 'package:flutter_reflection_test/annotations/annotations.dart'
    as prefix0;
import 'package:flutter_reflection_test/services/api.service.dart' as prefix1;
import 'package:flutter_reflection_test/services/services.dart' as prefix2;

// ignore_for_file: camel_case_types
// ignore_for_file: implementation_imports
// ignore_for_file: prefer_adjacent_string_concatenation
// ignore_for_file: prefer_collection_literals
// ignore_for_file: unnecessary_const

// ignore:unused_import
import 'package:reflectable/mirrors.dart' as m;
// ignore:unused_import
import 'package:reflectable/src/reflectable_builder_based.dart' as r;
// ignore:unused_import
import 'package:reflectable/reflectable.dart' as r show Reflectable;

final _data = <r.Reflectable, r.ReflectorData>{
  const prefix0.Reflector(): r.ReflectorData(
      <m.TypeMirror>[
        r.NonGenericClassMirrorImpl(
            r'ApiService',
            r'.ApiService',
            134217735,
            0,
            const prefix0.Reflector(),
            const <int>[1, 2],
            const <int>[3, 4, 5, 6, 7, 1],
            const <int>[],
            -1,
            {},
            {},
            {r'': (bool b) => () => b ? prefix1.ApiService() : null},
            0,
            0,
            const <int>[],
            const <Object>[const prefix0.Injectable(name: 'local-ApiService')],
            null),
        r.NonGenericClassMirrorImpl(
            r'ApiServiceProd',
            r'.ApiServiceProd',
            134217735,
            1,
            const prefix0.Reflector(),
            const <int>[8, 9],
            const <int>[3, 4, 5, 6, 7, 8],
            const <int>[],
            -1,
            {},
            {},
            {r'': (bool b) => () => b ? prefix1.ApiServiceProd() : null},
            0,
            1,
            const <int>[],
            const <Object>[const prefix0.Injectable(name: 'prod-ApiService')],
            null),
        r.NonGenericClassMirrorImpl(
            r'ServiceA',
            r'.ServiceA',
            134217735,
            2,
            const prefix0.Reflector(),
            const <int>[0, 10, 11, 14],
            const <int>[3, 4, 5, 6, 7, 10, 11, 12, 13],
            const <int>[],
            -1,
            {},
            {},
            {r'': (bool b) => () => b ? prefix2.ServiceA() : null},
            1,
            2,
            const <int>[],
            const <Object>[
              const prefix0.Injectable(
                  name: 'ServiceA', deps: const [prefix2.ServiceB])
            ],
            null),
        r.NonGenericClassMirrorImpl(
            r'ServiceB',
            r'.ServiceB',
            134217735,
            3,
            const prefix0.Reflector(),
            const <int>[15, 16],
            const <int>[3, 4, 5, 6, 7, 15],
            const <int>[],
            -1,
            {},
            {},
            {r'': (bool b) => () => b ? prefix2.ServiceB() : null},
            1,
            3,
            const <int>[],
            const <Object>[const prefix0.Injectable(name: 'ServiceB')],
            null),
        r.NonGenericClassMirrorImpl(
            r'ServiceC',
            r'.ServiceC',
            134217735,
            4,
            const prefix0.Reflector(),
            const <int>[17, 18],
            const <int>[3, 4, 5, 6, 7, 17],
            const <int>[],
            -1,
            {},
            {},
            {r'': (bool b) => () => b ? prefix2.ServiceC() : null},
            1,
            4,
            const <int>[],
            const <Object>[const prefix0.Injectable(name: 'ServiceC')],
            null)
      ],
      <m.DeclarationMirror>[
        r.VariableMirrorImpl(r'serviceB', 134348805, 2,
            const prefix0.Reflector(), 3, 3, 3, const <int>[], const []),
        r.MethodMirrorImpl(r'handle', 1310722, 0, -1, -1, -1, const <int>[],
            const <int>[], const prefix0.Reflector(), const <Object>[override]),
        r.MethodMirrorImpl(r'', 64, 0, -1, 0, 0, const <int>[], const <int>[],
            const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'==', 2097154, -1, -1, 5, 5, const <int>[],
            const <int>[0], const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'toString', 2097154, -1, -1, 6, 6, const <int>[],
            const <int>[], const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'noSuchMethod', 524290, -1, -1, -1, -1,
            const <int>[], const <int>[1], const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'hashCode', 2097155, -1, -1, 7, 7, const <int>[],
            const <int>[], const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'runtimeType', 2097155, -1, -1, 8, 8, const <int>[],
            const <int>[], const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'handle', 1310722, 1, -1, -1, -1, const <int>[],
            const <int>[], const prefix0.Reflector(), const <Object>[override]),
        r.MethodMirrorImpl(r'', 64, 1, -1, 1, 1, const <int>[], const <int>[],
            const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'serviceCall', 2097154, 2, -1, 6, 6, const <int>[],
            const <int>[], const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'getCount', 2097154, 2, -1, 7, 7, const <int>[],
            const <int>[2], const prefix0.Reflector(), const []),
        r.ImplicitGetterMirrorImpl(const prefix0.Reflector(), 0, 12),
        r.ImplicitSetterMirrorImpl(const prefix0.Reflector(), 0, 13),
        r.MethodMirrorImpl(r'', 64, 2, -1, 2, 2, const <int>[], const <int>[],
            const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'serviceCall', 2097154, 3, -1, 6, 6, const <int>[],
            const <int>[], const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'', 64, 3, -1, 3, 3, const <int>[], const <int>[],
            const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'serviceCall', 2097154, 4, -1, 6, 6, const <int>[],
            const <int>[], const prefix0.Reflector(), const []),
        r.MethodMirrorImpl(r'', 64, 4, -1, 4, 4, const <int>[], const <int>[],
            const prefix0.Reflector(), const [])
      ],
      <m.ParameterMirror>[
        r.ParameterMirrorImpl(r'other', 134348806, 3, const prefix0.Reflector(),
            -1, 9, 9, const <int>[], const [], null, null),
        r.ParameterMirrorImpl(
            r'invocation',
            134348806,
            5,
            const prefix0.Reflector(),
            -1,
            10,
            10,
            const <int>[],
            const [],
            null,
            null),
        r.ParameterMirrorImpl(r'i', 134348806, 11, const prefix0.Reflector(),
            -1, 7, 7, const <int>[], const [], null, null),
        r.ParameterMirrorImpl(
            r'_serviceB',
            134348902,
            13,
            const prefix0.Reflector(),
            3,
            3,
            3,
            const <int>[],
            const [],
            null,
            null)
      ],
      <Type>[
        prefix1.ApiService,
        prefix1.ApiServiceProd,
        prefix2.ServiceA,
        prefix2.ServiceB,
        prefix2.ServiceC,
        bool,
        String,
        int,
        Type,
        Object,
        Invocation
      ],
      5,
      {
        r'==': (dynamic instance) => (x) => instance == x,
        r'toString': (dynamic instance) => instance.toString,
        r'noSuchMethod': (dynamic instance) => instance.noSuchMethod,
        r'hashCode': (dynamic instance) => instance.hashCode,
        r'runtimeType': (dynamic instance) => instance.runtimeType,
        r'handle': (dynamic instance) => instance.handle,
        r'serviceCall': (dynamic instance) => instance.serviceCall,
        r'getCount': (dynamic instance) => instance.getCount,
        r'serviceB': (dynamic instance) => instance.serviceB
      },
      {r'serviceB=': (dynamic instance, value) => instance.serviceB = value},
      <m.LibraryMirror>[
        r.LibraryMirrorImpl(r'', Uri.parse(r'reflectable://0/'),
            const prefix0.Reflector(), const <int>[], {}, {}, const [], null),
        r.LibraryMirrorImpl(r'', Uri.parse(r'reflectable://1/'),
            const prefix0.Reflector(), const <int>[], {}, {}, const [], null)
      ],
      []),
  const prefix0.InjectableReflector(): r.ReflectorData(
      <m.TypeMirror>[],
      <m.DeclarationMirror>[],
      <m.ParameterMirror>[],
      <Type>[],
      0,
      {},
      {},
      <m.LibraryMirror>[],
      [])
};

final _memberSymbolMap = null;

void initializeReflectable() {
  r.data = _data;
  r.memberSymbolMap = _memberSymbolMap;
}
